/* Voici ce que fait ce code :

Il parse le contenu de l'√©l√©ment HTML avec l'ID centers-json, qui devrait contenir du JSON 
repr√©sentant un tableau de salles d'escalade (centers).

Il cr√©e une carte Leaflet avec l'ID map et centre la carte sur les coordonn√©es GPS 
[46.61605556964202, 2.7054297799658555] √† un zoom de 6. La carte est affich√©e avec des tuiles de OpenStreetMap.

Il cr√©e un tableau vide markers qui servira √† stocker les markers cr√©√©s pour chaque salle d'escalade.

Pour chaque salle d'escalade dans le tableau centers, il cr√©e un marker Leaflet et 
l'ajoute √† la carte. La position du marker est d√©termin√©e en utilisant les coordonn√©es 
GPS de la salle d'escalade (center.latitude et center.longitude). Il ajoute √©galement 
une popup au marker, qui affiche le nom de la salle d'escalade, sa description et un lien 
vers une page de d√©tails de la salle d'escalade. 

Il ajoute un √©couteur d'√©v√©nement click au marker, qui appelle la fonction focusCenter 
lorsque le marker est cliqu√©.

Il ajoute le marker au tableau markers, avec son ID et l'objet marker.

Il d√©finit la fonction focusMarker, qui prend en param√®tre un objet contenant un ID et un 
marker et met en surbrillance le marker sur la carte. La fonction ferme toutes les popups 
ouvertes sur la carte et ouvre la popup du marker s√©lectionn√©. Elle ajoute √©galement une 
classe CSS focused au marker s√©lectionn√©. La carte est √©galement centr√©e sur le marker avec
une animation, en utilisant la m√©thode flyTo de Leaflet.

Il d√©finit la fonction focusCenter, qui prend en param√®tre un ID de salle d'escalade et met
en surbrillance la salle d'escalade correspondante dans la liste des salles d'escalade 
affich√©e √† c√¥t√© de la carte. Elle appelle √©galement la fonction focusMarker pour mettre en 
surbrillance le marker correspond
*/

/* Getting the coordinates from the URL. */
function getCoordinatesInURL() {
    // R√©cup√®re l'objet URLSearchParams qui contient les param√®tres de l'URL
    const searchParams = new URLSearchParams(window.location.search);
    // R√©cup√®re la valeur du param√®tre "latitude"
    const paramLatitude = searchParams.get('latitude');
    const paramLongitude = searchParams.get('longitude');
    if (paramLatitude == null || paramLongitude == null) {
        return null;
    }
    return [paramLatitude, paramLongitude];
}


// R√©cup√®re les donn√©es JSON contenues dans l'√©l√©ment HTML avec l'ID "centers-json"
const centers = JSON.parse(document.getElementById("centers-json").innerHTML).map(c => c.center);

// Cr√©e une carte Leaflet et l'affiche dans l'√©l√©ment HTML avec l'ID "map"
// La carte est centr√©e sur les coordonn√©es 46.61605556964202, 2.7054297799658555 et affiche un niveau de zoom de 6
let centerCoords = getCoordinatesInURL();
console.log("üöÄ ~ file: leaflet_all_centers.js:58 ~ centerCoords", centerCoords)
if (centerCoords == null) {
    centerCoords = [46.61605556964202, 2.7054297799658555];
}

/* if(paramLatitude != null && paramLongitude != null) {
    centerCoords = [parseFloat(paramLatitude), parseFloat(paramLongitude)]
} */
let map = L.map('map').setView(centerCoords, 6);

// Ajoute une couche de tuiles OpenStreetMap √† la carte
L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);

// Cr√©e un tableau vide pour stocker les marqueurs Leaflet
const markers = [];

// Pour chaque √©l√©ment du tableau "centers", cr√©e un marqueur Leaflet sur la carte
centers.forEach((center) => {
    // Cr√©e un ic√¥ne personnalis√© pour le marqueur avec une image Leaflet par d√©faut comme contenu
    const markerIcon = L.divIcon({ className: 'marker-custom-icon', html: "<img src='https://unpkg.com/leaflet@1.9.3/dist/images/marker-icon.png'>", iconAnchor: [12.5, 41], popupAnchor: [0, -41] });

    // Cr√©e un marqueur Leaflet √† l'aide des coordonn√©es de "center" et de l'ic√¥ne personnalis√©
    const marker = L.marker([center.latitude, center.longitude], { icon: markerIcon }).addTo(map);

    // Ajoute une fen√™tre contextuelle au marqueur avec des informations sur "center"
    marker.bindPopup(`
    <h4>${center.name}</h4>
    <p>${center.description}</p>
    <p style="text-align: right;"><a href="centers/${center.id}">Plus de d√©tails >></a></p>
    `);

    // Ajoute un √©couteur d'√©v√©nement "click" au marqueur qui appelle la fonction "focusCenter" avec l'ID de "center" en argument
    marker.addEventListener('click', function () {
        focusCenter(center.id);
    });

    // Ajoute un objet contenant l'ID de "center" et le marqueur Leaflet correspondant au tableau "markers"
    markers.push({ id: center.id, marker })
});

// Fonction qui met en valeur le marqueur Leaflet associ√© √† un √©l√©ment du tableau "centers"
function focusMarker(markerWithId) {
    // Ferme la fen√™tre contextuelle de tous les marqueurs
    map.closePopup();

    // Supprime la classe "focused" de tous les marqueurs
    markers.forEach(m => {
        m.marker._icon.classList.remove("focused")
    });

    // D√©place la vue de la carte vers le marqueur en utilisant l'animation "flyTo"
    map.flyTo(markerWithId.marker.getLatLng(), 14, { duration: 1.5 });

    // Ouvre la fen√™tre contextuelle du marqueur
    markerWithId.marker.openPopup();

    // Ajoute la classe "focused" au marqueur
    markerWithId.marker._icon.classList.add("focused");
}

// Fonction qui met en valeur l'√©l√©ment HTML associ√© √† un √©l√©ment du tableau "centers"
function focusCenter(centerId) {
    // Supprime la classe "focused" de tous les √©l√©ments HTML avec la classe "center"
    document.querySelectorAll('.center').forEach(function (c) { c.classList.remove('focused') })

    // R√©cup√®re l'objet contenant l'ID et le marqueur Leaflet associ√© √† "centerId" dans le tableau "markers"
    const markerWithId = markers.find(marker => marker.id == centerId);

    // Appelle la fonction "focusMarker" avec l'objet r√©cup√©r√© en argument
    focusMarker(markerWithId);

    // R√©cup√®re l'√©l√©ment HTML associ√© √† "centerId"
    const divForCenter = getDivForCenter(centerId);

    // Ajoute la classe "focused" √† l'√©l√©ment HTML r√©cup√©r√©
    divForCenter.classList.add('focused');
    divForCenter.scrollIntoView({ behavior: "smooth" });
}

// Fonction qui r√©cup√®re l'√©l√©ment HTML associ√© √† un √©l√©ment du tableau "centers"
function getDivForCenter(centerId) {
    // R√©cup√®re tous les √©l√©ments HTML avec la classe "center"
    const allCentersDivs = [...document.querySelectorAll('.center')]

    // R√©cup√®re l'√©l√©ment HTML qui a l'attribut "data-center-id" √©gal √† "centerId" parmi tous les √©l√©ments r√©cup√©r√©s
    const divForCenterId = allCentersDivs.find(c => c.getAttribute('data-center-id') == centerId)

    // Retourne l'√©l√©ment HTML r√©cup√©r√©
    return divForCenterId;
}

// Fonction qui ajoute la classe "over" √† l'image de l'ic√¥ne du marqueur Leaflet associ√© √† un √©l√©ment du tableau "centers"
function startMarkerAnimation(centerId) {
    // R√©cup√®re l'objet contenant l'ID et le marqueur Leaflet associ√© √† "centerId" dans le tableau "markers"
    const markerWithId = markers.find(marker => marker.id == centerId);

    // R√©cup√®re l'image de l'ic√¥ne du marqueur
    markerWithId.marker._icon.childNodes[0].classList.add('over');
}

// Fonction qui supprime la classe "over" de l'image de l'ic√¥ne du marqueur Leaflet associ√© √† un √©l√©ment du tableau "centers"
function stopMarkerAnimation(centerId) {
    // R√©cup√®re l'objet contenant l'ID et le marqueur Leaflet associ√© √† "centerId" dans le tableau "markers"
    const markerWithId = markers.find(marker => marker.id == centerId);

    // R√©cup√®re l'image de l'ic√¥ne du marqueur
    markerWithId.marker._icon.childNodes[0].classList.remove('over');
}

const getCurrentPositionSuccessCallback = (position) => {
    const latitude = position.coords.latitude;
    const longitude = position.coords.longitude;
    redirectToPageWithCoords([latitude, longitude]);
};

const getCurrentPositionErrorCallback = (error) => {
    console.log(error);
    redirectToPageWithCoords(centerCoords);
};

if (getCoordinatesInURL() == null) {
    navigator.geolocation.getCurrentPosition(getCurrentPositionSuccessCallback, getCurrentPositionErrorCallback);
}

function redirectToPageWithCoords(coords) {
    // Cr√©e un nouvel objet URLSearchParams qui contient les nouvelles valeurs des param√®tres latitude et longitude
    const searchParams = new URLSearchParams();
    searchParams.set('latitude', coords[0]);
    searchParams.set('longitude', coords[1]);
    // Ajoute les param√®tres √† l'URL de la page actuelle et redirige vers cette URL en utilisant window.location.replace
    window.location.replace(`${window.location.pathname}?${searchParams}`);
}
